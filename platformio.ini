; PlatformIO Project Configuration File
; High-precision Motion Control System Configuration for ESP32 Wroom

[platformio]
default_envs = esp32dev

[env:esp32dev]
platform = espressif32                      ; Platform: ESP32 (espressif32) platform
board = esp32dev                            ; Board type: ESP32 Dev Module (Wroom)
framework = arduino                         ; Framework: Arduino for ESP32

; Build Configuration
build_flags = 
    -I include                              ; Include the include directory
    -DCORE_DEBUG_LEVEL=5                   ; Set debug level to 5 (most verbose output)
;   -DARDUINO_USB_MODE=1                   ; Enable USB mode (optional, only if USB communication is needed)
;   -DARDUINO_USB_CDC_ON_BOOT=1            ; Enable USB CDC on boot (for serial communication)
    -std=gnu++17                           ; Use C++17 standard (required for advanced C++ features)
;   -O2                                    ; Optimize for speed (O2 level of optimization)
    -Wall                                  ; Enable all warnings for better code quality
    -Wextra                                ; Enable extra warnings
    -Werror                                ; Treat warnings as errors
    -fno-exceptions                        ; Disable exceptions to reduce code size and complexity
;   -fno-rtti                              ; Disable RTTI to reduce code size (for embedded systems)
    -fexceptions                           ; Enable exceptions
    -mlongcalls                            ; Use long calls for functions (used in embedded systems)
    -mtext-section-literals                ; Store string literals in the text section (optimizes RAM usage)
    -falign-functions=4                    ; Align function start addresses to 4-byte boundaries (optimizes performance)
    -ffunction-sections                    ; Place each function in its own section (optimizes linking)
    -fdata-sections                        ; Place each data item in its own section (optimizes linking)
    -Wl,--gc-sections                      ; Enable garbage collection of unused sections (reduces binary size)

; Memory Configuration
board_build.partitions = huge_app.csv      ; Use the huge app partition scheme
;board_build.partitions = default_8MB.csv    ; Use the default 8MB partition table for the ESP32
board_build.f_cpu = 240000000L              ; Set the CPU frequency to 240 MHz (ESP32 Wroom)
board_build.flash_mode = qio                ; Set flash mode to Quad I/O for faster flash access
board_build.flash_freq = 80m                ; Set flash frequency to 80 MHz
board_build.flash_size = 8MB                ; Set flash size to 8MB

; Upload Configuration
upload_speed = 921600                       ; Set the upload speed to 921600 baud (fast upload)
;upload_port = auto                         ; Automatically detect the upload port
;upload_protocol = espota                   ; Use ESPOTA (Over-the-Air) protocol for uploading (for wireless uploads)

; Monitor Configuration
monitor_speed = 115200                                ; Set the monitor (serial) speed to 115200 baud
monitor_filters = esp32_exception_decoder, colorize   ; Use ESP32 exception decoder filter for better debugging output (log2file)
monitor_eol = LF                                      ; Set the end-of-line character to Line Feed (LF)
monitor_encoding = UTF-8                              ; Set the serial monitor encoding to UTF-8 for better compatibility

; Library Dependencies
lib_deps =
    EEPROM                                 ; Library for EEPROM support

; Development Environment
[env:dev]
extends = esp32dev
platform = espressif32
board = esp32dev
framework = arduino
build_type = debug                         ; Set build type to debug for development
build_flags = ${env:esp32dev.build_flags}  ; Use the same build flags as the base environment
    -g3                                    ; Enable maximum debugging information
    -ggdb3                                 ; Use GDB debugging symbols for better debugging support
    -DDEBUG=1                              ; Define DEBUG macro to enable debugging

; Production Environment
;[env:prod]
;extends = esp32dev
;platform = espressif32
;board = esp32dev
;framework = arduino
;build_type = release                       ; Set build type to release for production
;build_flags = ${env:esp32dev.build_flags}  ; Use the same build flags as the base environment
;    -DNDEBUG=1                             ; Define NDEBUG to disable debug code in release
;    -Os                                    ; Optimize for size in production builds