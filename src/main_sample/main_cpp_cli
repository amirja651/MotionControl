#include <ArduinoLog.h>
#include <ESP32TimerInterrupt.h>
#include <PID_v1.h>
#include <SimpleCLI.h>
#include "MAE3Encoder.h"
#include "MotorInstances.h"

TaskHandle_t serialTaskHandle       = NULL;
TaskHandle_t motorUpdateTaskHandle0 = NULL;
TaskHandle_t motorUpdateTaskHandle1 = NULL;
TaskHandle_t motorUpdateTaskHandle2 = NULL;
TaskHandle_t motorUpdateTaskHandle3 = NULL;

SimpleCLI cli;
Command   cmdMove1;
Command   cmdStop1;
Command   cmdEcho;
Command   cmdRm;
Command   cmdLs;
Command   cmdBoundless;
Command   cmdSingle;
Command   cmdHelp;

#define pinToUse 36
// Define Variables we'll be connecting to
double Setpoint, Input, Output;

// Define the aggressive and conservative Tuning Parameters
double aggKp = 4, aggKi = 0.2, aggKd = 1;
double consKp = 1, consKi = 0.05, consKd = 0.25;
// Specify the links and initial tuning parameters
PID myPID(&Input, &Output, &Setpoint, consKp, consKi, consKd, DIRECT);

// Task for handling serial commands
void serialTask(void* pvParameters)
{
    while (1)
    {
        if (Serial.available())
        {
            String input = Serial.readStringUntil('\n');

            if (input.length() > 0)
            {
                Serial.print("# ");
                Serial.println(input);
                cli.parse(input);
            }
        }

        if (cli.available())
        {
            Command c = cli.getCmd();

            int argNum = c.countArgs();

            Serial.print("> ");
            Serial.print(c.getName());
            Serial.print(' ');

            for (int i = 0; i < argNum; ++i)
            {
                Argument arg = c.getArgument(i);
                // if(arg.isSet()) {
                Serial.print(arg.toString());
                Serial.print(' ');
                // }
            }

            Serial.println();

            if (c == cmdMove1)
            {
                Argument a = c.getArgument("p");
                // bool     set = a.isSet();
                if (a.isSet())
                {
                    String p = c.getArgument("p").getValue();
                    // float  f = p.toFloat();
                    motors[0].moveForward();
                    Serial.print(p + " deg Rotated!");
                }
                else
                {
                    Serial.println("Parameter p (degrees) is not set");
                }
            }
            else if (c == cmdStop1)
            {
                motors[0].stop();
            }
            else if (c == cmdEcho)
            {
                Argument str = c.getArgument(0);
                Serial.println(str.getValue());
            }
            else if (c == cmdRm)
            {
                Serial.println("Remove directory " + c.getArgument(0).getValue());
            }
            else if (c == cmdLs)
            {
                Argument a = c.getArgument("a");
                // bool     set = a.isSet();
                if (a.isSet())
                {
                    Serial.println("Listing all directories");
                }
                else
                {
                    Serial.println("Listing directories");
                }
            }
            else if (c == cmdBoundless)
            {
                Serial.print("Boundless: ");

                for (int i = 0; i < argNum; ++i)
                {
                    Argument arg = c.getArgument(i);
                    if (i > 0)
                        Serial.print(",");
                    Serial.print("\"");
                    Serial.print(arg.getValue());
                    Serial.print("\"");
                }
            }
            else if (c == cmdSingle)
            {
                Serial.println("Single \"" + c.getArg(0).getValue() + "\"");
            }
            else if (c == cmdHelp)
            {
                Serial.println("Help:");
                Serial.println(cli.toString());
            }
        }

        if (cli.errored())
        {
            CommandError cmdError = cli.getError();

            Serial.print("ERROR: ");
            Serial.println(cmdError.toString());

            if (cmdError.hasCommand())
            {
                Serial.print("Did you mean \"");
                Serial.print(cmdError.getCommand().toString());
                Serial.println("\"?");
            }
        }
        vTaskDelay(pdMS_TO_TICKS(10));
    }
}

// Task for handling serial input and PID tuning
void serialTask2(void* pvParameters)
{
    const TickType_t     xFrequency    = pdMS_TO_TICKS(500);  // 50ms update rate
    TickType_t           xLastWakeTime = xTaskGetTickCount();
    static unsigned long lastPrintTime = 0;

    while (1)
    {
        if (Serial.available() > 0)
        {
            char input = Serial.read();

            switch (input)
            {
                case 'p':
                case 'P':  // Kp adjustment
                case 'i':
                case 'I':  // Ki adjustment
                case 'd':
                case 'D':  // Kd adjustment
                {
                    // Adjust the appropriate gain
                    switch (input)
                    {
                        case 'p':
                            lastKP = std::max(0.0, lastKP - PID_STEP_SMALL);
                            break;
                        case 'P':
                            lastKP += PID_STEP_SMALL;
                            break;
                        case 'i':
                            lastKI = std::max(0.0, lastKI - PID_STEP_SMALL);
                            break;
                        case 'I':
                            lastKI += PID_STEP_SMALL;
                            break;
                        case 'd':
                            lastKD = std::max(0.0, lastKD - PID_STEP_SMALL);
                            break;
                        case 'D':
                            lastKD += PID_STEP_SMALL;
                            break;
                    }

                    // Apply new gains
                    pids[0].setGains(lastKP, lastKI, lastKD);

                    // Print updated values immediately
                    Serial.print("PID gains updated: Kp=");
                    Serial.print(lastKP, 3);
                    Serial.print(", Ki=");
                    Serial.print(lastKI, 3);
                    Serial.print(", Kd=");
                    Serial.println(lastKD, 3);
                    break;
                }
                case 's':  // Toggle step size
                    Serial.print("Step size changed to: ");
                    Serial.println(PID_STEP_SMALL, 3);
                    break;
                case '?':  // Show help
                    Serial.println("\nPID Control Commands:");
                    Serial.println("p/P - Decrease/Increase Kp");
                    Serial.println("i/I - Decrease/Increase Ki");
                    Serial.println("d/D - Decrease/Increase Kd");
                    Serial.println("s   - Toggle step size (0.01/0.1)");
                    Serial.println("?   - Show this help");
                    break;
            }
        }

        // Print status periodically (every 500ms)
        if (millis() - lastPrintTime >= 500)
        {
            bool testOK = motors[0].testCommunication();
            if (testOK)
            {
                float currentPosition = encoders[0].getPositionDegrees();
                float currentVelocity = encoders[0].getVelocityDPS();
                float targetPosition  = pids[0].getTarget();
                float positionError   = abs(currentPosition - targetPosition);

                if (positionError > 180.0f)
                {
                    positionError = 360.0f - positionError;
                }

                Serial.print("Position: ");
                Serial.print(currentPosition, 2);
                Serial.print("째, Velocity: ");
                Serial.print(currentVelocity, 2);
                Serial.print("째/s, Target: ");
                Serial.print(targetPosition, 2);
                Serial.print("째, Error: ");
                Serial.print(positionError, 2);
                Serial.println("째");

                lastPrintTime = millis();
            }
        }

        taskYIELD();
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
    }
}

// Task for updating motor states
void motorUpdateTask0(void* pvParameters)
{
    const TickType_t xFrequency    = pdMS_TO_TICKS(10);  // Changed from 1ms to 10ms
    TickType_t       xLastWakeTime = xTaskGetTickCount();

    while (1)
    {
        motors[0].update();
        taskYIELD();  // Allow other tasks to run between motor updates
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
    }
}

// Task for updating motor states
void motorUpdateTask1(void* pvParameters)
{
    const TickType_t xFrequency    = pdMS_TO_TICKS(10);  // Changed from 1ms to 10ms
    TickType_t       xLastWakeTime = xTaskGetTickCount();

    while (1)
    {
        motors[1].update();
        taskYIELD();  // Allow other tasks to run between motor updates
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
    }
}

// Task for updating motor states
void motorUpdateTask2(void* pvParameters)
{
    const TickType_t xFrequency    = pdMS_TO_TICKS(10);  // Changed from 1ms to 10ms
    TickType_t       xLastWakeTime = xTaskGetTickCount();

    while (1)
    {
        motors[2].update();
        taskYIELD();  // Allow other tasks to run between motor updates
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
    }
}

// Task for updating motor states
void motorUpdateTask3(void* pvParameters)
{
    const TickType_t xFrequency    = pdMS_TO_TICKS(10);  // Changed from 1ms to 10ms
    TickType_t       xLastWakeTime = xTaskGetTickCount();

    while (1)
    {
        motors[3].update();
        taskYIELD();  // Allow other tasks to run between motor updates
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
    }
}

void initializeCLI()
{
    cmdMove1 = cli.addCmd("move1");
    cmdMove1.addArg("p", "30.0");
    cmdMove1.setDescription(" Rotate motor[1] 1 by 360 degrees");

    cmdStop1 = cli.addCmd("stop1");
    cmdStop1.setDescription(" Stop motor[1]");

    cmdEcho = cli.addCmd("echo");
    cmdEcho.addPosArg("text", "something");
    cmdEcho.setDescription(" Echos what you said");

    cmdRm = cli.addCmd("rm");
    cmdRm.addPosArg("file");
    cmdRm.setDescription(" Removes specified file (but not actually)");

    cmdLs = cli.addCmd("ls");
    cmdLs.addFlagArg("a");
    cmdLs.setDescription(" Lists files in directory (-a for all)");

    cmdBoundless = cli.addBoundlessCmd("boundless");
    cmdBoundless.setDescription(" A boundless command that echos your input");

    cmdSingle = cli.addSingleArgCmd("single");
    cmdSingle.setDescription(" A single command that echos your input");

    cmdHelp = cli.addCommand("help");
    cmdHelp.setDescription(" Get help!");
}

void setup2()
{
    // Initialize serial communication
    Serial.begin(CONFIG::System::SERIAL_BAUD_RATE);
    delay(Config::System::STARTUP_DELAY_MS);
    while (!Serial)
    {
        delay(10);
    }

    Log.begin(LOG_LEVEL_VERBOSE, &Serial);
    Log.noticeln(F("Hello, World!"));
    Log.noticeln(F("CPU Frequency : %d MHz" CR), F_CPU / 1000000);

    Setpoint = 30.5;

    // turn the PID on
    myPID.SetOutputLimits(0, 3933);
    myPID.SetMode(AUTOMATIC);

    delay(500);
    initializeMotors();
    initializeCLI();
    xTaskCreate(serialTask, "SerialTask", 4096, NULL, 2, &serialTaskHandle);
    xTaskCreate(motorUpdateTask0, "MotorUpdateTask0", 4096, NULL, 3, &motorUpdateTaskHandle0);
    xTaskCreate(motorUpdateTask1, "MotorUpdateTask1", 4096, NULL, 3, &motorUpdateTaskHandle1);
    xTaskCreate(motorUpdateTask2, "MotorUpdateTask2", 4096, NULL, 3, &motorUpdateTaskHandle2);
    xTaskCreate(motorUpdateTask3, "MotorUpdateTask3", 4096, NULL, 3, &motorUpdateTaskHandle3);
}

bool first = true;

void loop2()
{
    /*
        if (encoder.isNewPulseAvailable())
        {
            Input          = encoder.getPulseWidth();
            float position = encoder.getPositionDegrees();
            Setpoint       = 10.5;

            double gap = abs(Setpoint - Input);  // distance away from setpoint

            if (gap < 10)
            {  // we're close to setpoint, use conservative tuning parameters
                myPID.SetTunings(consKp, consKi, consKd);
            }
            else
            {
                // we're far from setpoint, use aggressive tuning parameters
                myPID.SetTunings(aggKp, aggKi, aggKd);
            }

            myPID.Compute();

            if (first)
            {
                // Print position only when it changes
                Serial.println(F("Position\tPulse width\tOutput"));
                Serial.println(F("========\t===========\t======"));
                first = false;
            }

            // Optimized printing with proper format specifiers and reduced precision
            Serial.print(position, 1);  // 1 decimal place for position
            Serial.print('\t');
            Serial.print(static_cast<uint32_t>(Input));  // Cast to uint32_t for pulse width
            Serial.print(F("\t\t"));
            Serial.println(Output, 1);  // 1 decimal place for output
        }
    */
}
