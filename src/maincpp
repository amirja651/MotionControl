#include "CLI_Manager.h"
#include "Constants.h"
#include "ESP32_Manager.h"
#include "MAE3Encoder.h"

#include "Motor_Manager.h"
#include "Object_Manager.h"
#include "Position_Storage.h"
#include "UnitConversion.h"

#include "esp_task_wdt.h"
#include <SPI.h>
#include <inttypes.h>

static const uint16_t ENC_A = 36;
static const uint16_t ENC_B = 39;
static const uint16_t ENC_C = 34;
static const uint16_t ENC_D = 35;

MAE3Encoder encoder = MAE3Encoder(ENC_A, 0);

// Buffer for storing output
char outputBuffer[200];

void setup()
{
    SPI.begin();
    Serial.begin(115200);
    esp_task_wdt_init(10, true);  // 10 seconds timeout, panic reset enabled
    esp_task_wdt_add(NULL);       // Add the current task (setup)
    esp_log_level_set("*", ESP_LOG_VERBOSE);
    delay(1000);
    while (!Serial)
    {
        delay(10);
    }

    printSystemInfo();
    // initializeCLI();
    //  initPositionStorage();  // Initialize EEPROM
    // initializeDriversAndTest();
    // initializeOtherObjects();

    encoder.begin();
    printf("\e[1;1H\e[2J");  // clear screen
}

uint32_t lastPulseWidthUs = 0;
float    lastPosition     = 0;

void loop()
{
    esp_task_wdt_reset();
    encoder.update();
    const auto& state     = encoder.getState();
    String      direction = state.direction == Direction::CLOCKWISE ? "CW" : "CCW";
    float       degrees   = encoder.getPositionDegrees();

    if (fabs(state.current_Pulse - lastPulseWidthUs) > 1)
    {
        // printf("\e[2J\e[1;1H");  // clear screen
        //  table header
        Serial.print("Laps\tPulse_Width\tCurrent_Pulse\tDegrees\t\tDirection\tPulse_High\tPulse_Low\tTotal_Pulse\n");

        // Format all values into the buffer
        Serial.print(state.laps);
        Serial.print("\t");
        Serial.print(state.pulse_width);
        Serial.print("\t\t");
        Serial.print(state.current_Pulse);
        Serial.print("\t\t");
        Serial.print(degrees);
        Serial.print("\t\t");
        Serial.print(direction.c_str());
        Serial.print("\t\t");
        Serial.print(state.t_on);
        Serial.print("\t\t");
        Serial.print(state.t_off);
        Serial.print("\t\t");
        Serial.print(state.total_t);
        Serial.println();

        lastPulseWidthUs = state.current_Pulse;
    }

    delay(100);
}